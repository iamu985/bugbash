# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


'''
Test Documentation: User Flow for New User Order Placement

Test Objective: This test simulates the user flow for a new user who selects items, is redirected to the login page, logs in, and then places an order.
Test Steps:

    Item Selection:
        The new user browses the available items on the website.
        The user selects one or more items to add to their cart.

    Redirection to Login:
        After selecting items, the user is redirected to the login page.
        The system prompts the user to log in to continue with the order placement.

    User Login:
        The user enters their login credentials (username and password).
        The user submits the login form.

    Order Placement:
        Once logged in, the user is redirected back to the shopping cart or order summary page.
        The user reviews the selected items and proceeds to place the order.

    Confirmation:
        The system confirms that the order has been successfully placed.
        The user receives an order confirmation message.

Expected Results:

    The user should be able to select items without any issues.
    The redirection to the login page should occur seamlessly after item selection.
    The login process should be smooth, allowing the user to log in successfully.
    The user should be able to place the order without encountering errors.

  '''

class TestOrderflownewuser():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_orderflownewuser(self):
    # Test name: Order flow_new_user
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("https://kolkata.bugbash.live/")
    # 2 | setWindowSize | 1972x1100 | 
    self.driver.set_window_size(1972, 1100)
    # 3 | click | css=#\31 > .shelf-item__buy-btn | 
    self.driver.find_element(By.CSS_SELECTOR, "#\\31 > .shelf-item__buy-btn").click()
    # 4 | click | css=#\31 3 > .shelf-item__buy-btn | 
    self.driver.find_element(By.CSS_SELECTOR, "#\\31 3 > .shelf-item__buy-btn").click()
    # 5 | click | css=#\32 5 > .shelf-item__buy-btn | 
    self.driver.find_element(By.CSS_SELECTOR, "#\\32 5 > .shelf-item__buy-btn").click()
    # 6 | click | css=.buy-btn | 
    self.driver.find_element(By.CSS_SELECTOR, ".buy-btn").click()


    time.sleep(2)


    # Expected URL after redirection
    expected_url = "https://kolkata.bugbash.live/signin?checkout=true"

    # Check if the current URL matches the expected URL
    current_url = self.driver.current_url
    assert current_url == expected_url, f"Expected URL: {expected_url}, but got: {current_url}"


    # 7 | click | xpath=//div[@id='username']/div/div | 
    self.driver.find_element(By.XPATH, "//div[@id=\'username\']/div/div").click()
    # 8 | click | id=react-select-2-option-0-0 | 
    self.driver.find_element(By.ID, "react-select-2-option-0-0").click()
    # 9 | click | xpath=//div[@id='password']/div/div | 
    self.driver.find_element(By.XPATH, "//div[@id=\'password\']/div/div").click()
    # 10 | click | id=react-select-3-option-0-0 | 
    self.driver.find_element(By.ID, "react-select-3-option-0-0").click()
    # 11 | click | id=login-btn | 
    self.driver.find_element(By.ID, "login-btn").click()
    # 12 | click | id=firstNameInput | 
    self.driver.find_element(By.ID, "firstNameInput").click()
    # 13 | type | id=firstNameInput | Nishchal
    self.driver.find_element(By.ID, "firstNameInput").send_keys("Nishchal")
    # 14 | click | css=.checkout-address | 
    self.driver.find_element(By.CSS_SELECTOR, ".checkout-address").click()
    # 15 | click | id=lastNameInput | 
    self.driver.find_element(By.ID, "lastNameInput").click()
    # 16 | type | id=lastNameInput | Rai
    self.driver.find_element(By.ID, "lastNameInput").send_keys("Rai")
    # 17 | click | id=addressLine1Input | 
    self.driver.find_element(By.ID, "addressLine1Input").click()
    # 18 | type | id=addressLine1Input | null
    self.driver.find_element(By.ID, "addressLine1Input").send_keys("null")
    # 19 | click | id=provinceInput | 
    self.driver.find_element(By.ID, "provinceInput").click()
    # 20 | type | id=provinceInput | West Bengal
    self.driver.find_element(By.ID, "provinceInput").send_keys("West Bengal")
    # 21 | click | id=postCodeInput | 
    self.driver.find_element(By.ID, "postCodeInput").click()
    # 22 | type | id=postCodeInput | 0000
    self.driver.find_element(By.ID, "postCodeInput").send_keys("0000")
    # 23 | click | css=.form-actions | 
    self.driver.find_element(By.CSS_SELECTOR, ".form-actions").click()
    # 24 | click | id=checkout-shipping-continue | 
    self.driver.find_element(By.ID, "checkout-shipping-continue").click()
    # 25 | click | css=.button--tertiary | 
    time.sleep(2)
    self.driver.find_element(By.CSS_SELECTOR, ".button--tertiary").click()
    # 26 | click | css=#orders > strong | 
    self.driver.find_element(By.CSS_SELECTOR, "#orders > strong").click()
    # 27 | click | css=.p-10 | 
    self.driver.find_element(By.CSS_SELECTOR, ".p-10").click()
    # 28 | close |  | 
    self.driver.close()
  
